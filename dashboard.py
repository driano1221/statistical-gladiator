# dashboard.py

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# --- Configura칞칚o da P치gina ---
st.set_page_config(
    page_title="Statistical Gladiator Dashboard",
    page_icon="丘덢잺",
    layout="wide"
)

# --- Carregamento e Cache dos Dados ---
# Usamos cache para n칚o recarregar os dados a cada intera칞칚o


@st.cache_data
def load_data():
    try:
        df = pd.read_csv('phase2_results.csv')
        return df
    except FileNotFoundError:
        return None


results_df = load_data()

# --- T칤tulo e Introdu칞칚o ---
st.title("丘덢잺 Statistical Gladiator: A Arena de Batalha")
st.markdown("""
Bem-vindo ao Dashboard de resultados do projeto 'Statistical Gladiator'.
Aqui, analisamos a performance de m칠todos estat칤sticos cl치ssicos e algoritmos de Machine Learning
em diferentes cen치rios de dados imperfeitos.
""")

# --- L칩gica de Exibi칞칚o ---
if results_df is None:
    st.error("Arquivo 'phase2_results.csv' n칚o encontrado. Por favor, rode a simula칞칚o 'main_runner.py' primeiro.")
else:
    st.header("游댠 Heatmap de Performance dos Gladiadores 游댠")

    # --- L칩gica de sumariza칞칚o (a mesma do notebook) ---
    summary_list = []
    for condition in results_df['condition'].unique():
        for gladiator in results_df['gladiator'].unique():
            subset = results_df[(results_df['condition'] == condition) & (
                results_df['gladiator'] == gladiator)]
            if subset['p_value'].notna().any():
                power = (subset['p_value'] < 0.05).mean()
                summary_list.append(
                    {'condition': condition, 'gladiator': gladiator, 'metric': 'Power', 'value': power})
            elif subset['accuracy'].notna().any():
                avg_accuracy = subset['accuracy'].mean()
                summary_list.append({'condition': condition, 'gladiator': gladiator,
                                    'metric': 'Avg. Accuracy', 'value': avg_accuracy})

    summary_df = pd.DataFrame(summary_list)
    summary_pivot = summary_df.pivot_table(
        index='gladiator', columns='condition', values='value')

    # --- Desenho do Gr치fico ---
    fig, ax = plt.subplots(figsize=(12, 8))
    sns.heatmap(
        summary_pivot,
        annot=True,
        fmt=".3f",
        cmap='viridis',
        linewidths=.5,
        ax=ax,
        cbar_kws={'label': 'Performance (Poder ou Acur치cia M칠dia)'}
    )
    ax.set_title('Performance dos Gladiadores em Diferentes Arenas',
                 fontsize=16, pad=20)
    ax.set_xlabel('Condi칞칚o de Batalha (Arena)', fontsize=12)
    ax.set_ylabel('Gladiador', fontsize=12)
    plt.xticks(rotation=45, ha='right')
    plt.yticks(rotation=0)

    # Exibe o gr치fico no Streamlit
    st.pyplot(fig)

    st.markdown("---")
    st.header("游닆 Tabela de Resumo dos Resultados")
    st.dataframe(summary_pivot.style.format(
        "{:.3f}").background_gradient(cmap='viridis'))

    st.header("游늵 Dados Brutos da Simula칞칚o")
    st.dataframe(results_df)
